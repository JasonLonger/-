地址：https://juejin.cn/post/6844904021308735502
✨浏览器缓存有两种情况，一种是需要发送HTTP请求，一种不用
首先检查强缓存，这个阶段不需要发送HTTP请求，通过检查字段，HTTP/1.0协议是Expires，HTTP/1.1协议是Cache-Control
Expires:过期时间（HTTP/1.0），存在服务端返回的请求头中，告诉浏览器过期时间前可以从缓存获取数据，但是存在一个缺陷：服务端时间和浏览器时间可能不一致，后被弃用

Cache-Control：(HTTP/1.1)，非具体过期时间点方式，使用过期时长控制缓存

max-age还可以组合多个指令达到不同效果
public: 客户端和代理服务器都可以缓存（服务端到达客户端，可能经过多个代理服务端节点）
private: 只能浏览器缓存，中间代理节点不缓存
no-cache：跳过当前强缓存，发起HTTP请求，即直接进入协商缓存
no-store：没有任何缓存形式
s-maxage: 针对代理服务器的缓存时间
注意：Expires和Cache-Control共存时，优先Cache-Control，这两个标识是服务器返回给浏览器的

Last-Modified: 最后修改时间，第一次服务端返回响应头给浏览器，后面强缓存后，协商缓存时，发起请求，存在If-Modified-Since字段发送给服务端，服务端作对比，有变化就返回最新资源，没有就返回304，告诉浏览器直接用缓存

ETag: 由服务器根据当前文件内容生成的唯一标识，和上面流程差不多，字段名改为If-None-Match

两者比较：
精确度，Etag高于Last-Modified
主要体现在两方面，编辑但文件没变化，Last-Modified无感；或者一秒内操作，Last-Modified感知单位为秒
性能上相反，Last-Modified只是记录时间点，Etag则需要根据具体文件生成哈希值
优先级上，服务器优先支持ETag

缓存位置（从高到低）
Service Worker: 借鉴Web Worker思路，无法直接操作访问DOM，但可以完成很多有用功能，比如离线缓存、消息推送、网络代理等功能，其中离线缓存就是Service Worker Cache

Memory Cache和Disk Cache:
Memory Cache指内存缓存，效率最快，存活最短，渲染进程结束后就不存在
Disk Cache磁盘缓存，效率比内存缓存慢，但是优势在存储容量和存储时长
主要策略：
比较大的JS、CSS文件直接丢进磁盘缓存，小的丢内存
内存使用率较高时，文件优先进入磁盘缓存

Push Cache
推送缓存，浏览器最后一道防线，HTTP/2内容

总结：
首先一般都不用Expired了，现在都用Cache-Control验证强缓存是否可用，可用就直接使用缓存，不行就进入协商缓存，即发起HTTP请求，服务器端通过请求头If-Modified-Since或者If-None-Match字段判断资源是否更新，没有就返回304用缓存，更新就返回最新文件。


✨能不能说一说浏览器的本地存储？各自优劣如何？
本地存储分为Cookie、WebStorage和IndexedDB，WebStorage又分localStorage和sessionStorage
Cookie
最初设计目的是为了HTTP的状态存储
本质是浏览器里面存储的很小一个文件文本，键值对形式存储，同一域名都会携带相同Cookie带上请求发给服务端，有服务端解析拿到客户端状态
存在缺陷：
容量缺陷：最多4KB，啥也不是，还有有效期
性能缺陷：Cookie紧跟域名，同一域名自动带上完整Cookie，不管需不需要，请求数多了，就会造成巨大性能浪费
安全缺陷：纯文本传递，很容易被拦截篡改，HttpOnly为false情况，Cookie可以直接通过JS脚本读取

Localstorage
和Cookie一样，针对一个域名，即同一域名会存储相同的一段localStorage
特性：
容量：5M，相对Cookie 4K大的多，还是持久存储
存储位置：只存客户端，默认不参与服务端通信，当然Js获取转换传递就是另一种形式；这样就没性能问题以及安全问题
接口封装：浏览器提供storage对象，支持对应api localstorage，可通过setItem或者getItem等方式操作，非常方便
应用场景：存储一些稳定的资源，如果logo，Base64格式的图片资源

sessionStorage
容量、存储位置、接口封装都和localstorage一样
但和localstorage存在一个本质区别，前者是会话级，不是持久化存储，页面关闭，就消失，刷新不会消失
应用场景：
1. 表单信息维护，刷新不消失
2. 存储本次浏览记录，关闭页面不需要存储，类似微博存储方式

IndexedDB
运行在浏览器中的非关系型数据库，理论上容量没有上线
特性：拥有数据库的特性，比如支持事务，存储二进制数据，还有一些额外特性需要注意：
键值对存储。内部采取对象仓库存储，数据采用键值对
异步操作，数据库读写属于I/O操作，浏览器支持异步I/O操作
受限同源策略限制，即无法访问跨域的数据库

PWA
PWA（Progressive Web App）是一种新型的网站应用，它通过利用现代浏览器提供的 API 和功能，将传统的网站变成类似于应用程序的体验。PWA 具有应用程序的特性，包括离线访问、推送通知、安装和启动等，同时也可以在不同设备上进行无缝的体验。

PWA 的主要特点包括以下几个方面：

快速和可靠：PWA 能够快速加载和运行，同时具备可靠性，不会因为网络问题而无法使用。
离线访问：通过使用 Service Worker 技术，PWA 可以实现离线访问，用户在无网络状态下也可以使用 PWA 的功能。
推送通知：PWA 可以向用户发送推送通知，增强用户与应用程序的交互。
安装和启动：用户可以将 PWA 安装到主屏幕或桌面，使其启动速度更快，并获得与应用程序类似的体验。
PWA 的开发需要使用一些技术，如 Service Worker、Web App Manifest 等，这些技术可以让网站变得更像应用程序，同时也能提高用户体验。

总结：（可以了解一下PWA，是依托这些优秀的存储方案发展起来的）
Cookie并不适合存储，而且存在许多缺陷，如容量，性能，安全等方面
WebStorage包括localstorage和sessionStorage，默认不参与和服务器的通信，规避了Cookie那样的性能、安全问题
IndexedDB为运行在浏览器上的非关系型数据库，为大型数据的存储提供了接口

