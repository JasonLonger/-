单文件组件：*.vue single File components SFC
选项式api：包含多个选项对象描述组件逻辑
组合式api：使用导入的api函数描述组件逻辑，需搭配<script setup>使用
组合式函数：利用Vue的组合式api来封装和复用有状态逻辑的函数

编译时：
在浏览器加载 Vue.js 应用程序之前，Vue.js 编译器在服务器端或构建工具（编译器）中执行的过程。这个过程将 Vue 模板转换为渲染函数，这些渲染函数最终将被用来生成用户界面。在编译时阶段，Vue.js 可以对模板进行语法检查、变量替换、组件编译等操作。
运行时
在浏览器中加载 Vue.js 应用程序后，Vue.js 运行时开始执行的过程。这个过程包括创建 Vue 实例、挂载组件、更新视图等操作。在运行时阶段，Vue.js 可以对用户界面进行响应式更新，实现数据的双向绑定。


Vue SSG: 指使用 Vue.js 框架的静态网站生成器（Static Site Generator）。这些生成器使用一系列配置、模板和数据来生成静态 HTML 文件和相关资源，通常不需要使用服务器来渲染页面。Vue SSG 通常用于快速搭建高性能、低成本的静态网站
import { creatApp } from 'vue'创建
应用实例必须在调用了 .mount() 方法后才会渲染出来
当根组件没有设置 template 选项时，Vue 将自动使用容器的 innerHTML 作为模板
app.config 提供应用配置
app.component 注册组件
mustache语法，双大括号
<a @[evnetName]="xxx">
动态参数中表达式的值应当是一个字符串，或者是 null。特殊值 null 意为显式移除该绑定。其他非字符串的值会触发警告。
可修改计算属性：
const test = computed({
get () {
return xxx + yyy
},
set (newValue) {
xxx = newValue.xxx
yyy = newValue.yyy
}
})
getter不应该有副作用，例如异步请求和修改dom，只做计算

当 v-if 和 v-for 同时存在于一个元素上的时候，v-if 会首先被执行。请查看列表渲染指南获取更多细节。

能够被监听的数组变化方法：
push、pop、shift、unshift、splice、sort、reverse

v-model='text' => :value='test' @input="event => text = event.target.value"

默认情况下，v-model 会在每次 input 事件后更新数据 (IME 拼字阶段的状态例外)。你可以添加 lazy 修饰符来改为在每次 change 事件后更新数据

钩子应该在组件初始化时候同步注册，不要用定时器套住



侦听器回调中能访问被 Vue 更新之后的 DOM，你需要指明 flush: 'post' 选项

后置刷新的 watchEffect() 有个更方便的别名 watchPostEffect()

侦听器必须用同步语句创建：如果用异步回调创建一个侦听器，那么它不会绑定到当前组件上，你必须手动停止它，以防内存泄漏



当在 v-for 中使用模板引用时，对应的 ref 中包含的值是一个数组，它将在元素被挂载后包含对应整个列表的所有元素：

应该注意的是，ref 数组并不保证与源数组相同的顺序。

动态组件：<component :is="xxx" 一般搭配v-for>
当使用 <component :is="..."> 来在多个组件间作切换时，被切换掉的组件会被卸载。我们可以通过 <KeepAlive> 组件强制被切换掉的组件仍然保持“存活”的状态。

全局注册： app.component('xx', xx)
链式： app.component().component()

prop校验
defineProp({
test: {
validator(value) {
return ['1', [2]].includes(value)
}
}
})

emit校验



禁用透传（attributes继承）
export default { 
inheritAttrs: false
}

插槽：v-slot:header   子组件，<slot name="header">

注入解决祖先与子孙传递
provide('名', {}) // 值可以是响应式对象

大型项目建议使用symbol作为注入名 const xxx = Symbol() 避免重名等潜在冲突

异步组件：defineAsyncComponent
全局app.component('Mycomponent', defineAsyncComponent(() => {
import('./components/MyComponent.vue')
}))
局部注册：
import { defineAsyncComponent } from 'vue'
const xxx = defineAsyncComponent(() => {
import(./xxx)
})
提供额外配置，加载中、失败后显示，具体看官网，可搭配suspense

复用无状态逻辑的库：lodash、date-fns
项目中可以加的

TS类型：target: HTMLButtonElement, event: string, callback: EventListenerOrEventListenerObject
组合式函数约定用驼峰命名法命名，并以‘use’作为开头，在<script setup>或setup钩子中，以始终被同步调用
作用：抽离通用组件，以及改善代码逻辑，相当于可以相互通信的组件范围内的服务.

自定义指令：app.directive('focus', {})

插件：一个拥有install()方法的对象，或者安装函数本身

suspense #default #fallback 一般用不上

前端工程化最终目的是：为了能够更好的维护代码

前缀为vue.runtime.*文件只包含运行时版本，即不包含编译器，模板由构建步骤预先编译
名称不包含.runtime文件为完整版，包含编译器，支持由浏览器直接编译模板，体积增加大概14kb
所以默认工具链如vue-cli、vite等都会使用仅含运行时版本，所有SFC模板被预编译

如果使用了构建步骤，应当尽量选择提供 ES 模块格式的依赖，它们对 tree-shaking 更友好。举例来说，选择 lodash-es 比 lodash 更好。

不推荐使用 reactive() 的泛型参数，因为处理了深层次 ref 解包的返回值与泛型参数的类型不同

相对于选项式api，使用组合式api的好处：
更好的逻辑复用，解决mixins所有缺陷
更灵活代码组织
更好的Typescript推导
更小的生产包体积，主要体现在不像选项式api依赖this上下文对象访问属性，<script setup>直接访问定义变量，无需从实例代理，这对代码压缩更友好，因为本地变量代码名字可以被压缩，但对象属性名不行

渲染机制，基于虚拟dom节点，将一份模板转换成真实的DOM节点，同时能够高效的更新这些节点
虚拟DOM: 将目标所需的UI通过数据结构“虚拟”地表现出来，保存在内存中，然后和真实的DOM进行同步，最开始是React开拓，后面其他框架采用。与其说是一种技术，不如说是一种模式


Vue 编译器用来提高虚拟 DOM 运行时性能的主要优化
静态提升，静态node节点自动提升到模板渲染函数外，避开重新渲染；多个连续静态元素会被压缩成一个“静态vnode”,这些节点通过innerHTML挂载，同时复用可以通过cloneNode()克隆
更新类型标记： 每个vnode都会有更新类型标记，渲染器通过位运算检查标志做对应操作，运行时可以基于这些标志完全跳过一些节点，提高效率
树结构打平，通过createElementBlock创建虚拟DOM，内部稳定区块，每个快都会追踪所有带更新类型标志的后代节点（不只是直接子节点），编译结果打平成数组，仅包含所有动态的后代节点，渲染时候只需要渲染打平树而不是整个树，极大减少虚拟 DOM 协调时需要渲染的节点数，静态部分会被高效略过




渲染函数
import { h } from 'vue'
const vnode = h(
    'div', // type
    { id: '1'}, // props
  [
    /* children */
  ]
)
当使用 TSX 语法时，确保在 tsconfig.json 中配置了 "jsx": "preserve"
实例联系
<div>
    <div v-if="ok">yes</div>
    <span v-else>no</span>
</div>
等价于
h('div', [ok.value ? h('div', 'yes') : h('span', 'no')'])

v-for => .map()

@click => onClick()

其他直接看官网
