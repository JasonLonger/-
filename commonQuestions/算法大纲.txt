✅基础数据结构

1.数组（Array）：一组相同类型的数据按照一定顺序排列而成的数据结构。可以通过下标访问元素，但插入和删除操作需要移动大量元素，时间复杂度较高。
2.链表（Linked List）：由节点组成的数据结构，每个节点包含数据域和指向下一节点的指针。可以方便地进行插入和删除操作，但随机访问元素效率比较低。
3.栈（Stack）：后进先出（Last In First Out，LIFO）的数据结构，只能在一端进行插入和删除操作。
4.队列（Queue）：先进先出（First In First Out，FIFO）的数据结构，可以在队首进行删除操作，在队尾进行插入操作。
5.树（Tree）：由节点和边组成的非线性数据结构，每个节点至多有一个父节点和多个子节点。常见的有 二叉树（Binary Tree）、平衡树（Balanced Tree）等。
6.图（Graph）：由节点和边组成的非线性数据结构，节点之间的关系可以是任意的。常见的有 有向图（Directed Graph）、无向图（Undirected Graph）等。

这些数据结构之间的区别在于其组织方式、存储结构、操作方式等不同，但它们都可以用来表示和处理数据，实现各种算法和应用。
共同的特点是它们都是用来存储和组织数据的基本工具，任何复杂的数据结构都可以由它们来构建。
同时，它们也都有对应的算法和操作方法，如查找、插入、删除、排序等。


✅算法复杂度

是衡量算法效率的一个指标，通常用时间复杂度和空间复杂度来表示。

时间复杂度：描述算法执行所需要的时间成本，通常用大O符号表示。常见的时间复杂度有：
常数阶 O(1)：无论数据量多大，都需要固定的时间。
对数阶 O(logN)：随着数据量的增加，时间成本增长缓慢。
线性阶 O(N)：数据量增加时，时间成本直线增长。
平方阶 O(N^2)：时间成本随着数据量增加而呈平方倍增长。
指数阶 O(2^N)：时间成本随着数据量增加而指数倍增长。
空间复杂度：描述算法在执行过程中需要占用的内存空间，也通常用大O符号表示。
当设计算法时，需要分析和评估算法的时间复杂度和空间复杂度，选择合适的数据结构和算法思想，以达到最优化的算法效率。

✅算法思想
算法是解决问题的有效方法，而算法思想可以用来指导算法的设计和实现。常见的算法思想：

贪心算法：每一步都选择当前状态下的最优解，以期望达到全局最优解。
分治算法：将问题分成多个子问题，递归求解子问题，并将结果合并。
动态规划：将一个大问题分解成若干个小问题，先求解小问题，再根据小问题的解得到整体的解。
回溯算法：通过试错的方式寻找问题的解，当发现当前方案不能得到正确的解时，回退到上一步尝试其他方案。
搜索算法：按照特定的搜索策略遍历问题的所有解空间，通常有深度优先搜索、广度优先搜索等。
统计算法：利用统计学原理对数据进行分析处理，例如K-Means聚类算法、决策树算法等。
人工智能算法：应用机器学习、神经网络等技术构建模型，从数据中挖掘出隐藏的关系和规律，例如感知器、决策树、SVM等。
分支限界算法：将问题分解成若干个子问题，每个子问题可以产生多个扩展结点，对结点进行评估后选择最优的扩展结点。
模拟退火算法：通过模拟物质在高温下的退火过程，以概率接受劣解，从而跳出局部极值，达到全局最优解。
遗传算法：将问题抽象为染色体结构，通过模拟生物进化过程，使用交叉和变异等操作产生新的染色体，逐步优化求解。
蚁群算法：模拟蚂蚁寻找食物的行为，在搜索空间中释放多个"蚂蚁"，通过信息素引导，不断优化路径，最终得到最优解。
支持向量机：一种基于统计学习理论的分类算法，在高维空间中进行特征分类，具有较强的泛化能力。

✅排序算法
排序算法是计算机科学中的经典问题之一，它们可以将一个无序的数据集合快速地转换为有序的序列。以下是一些常见的排序算法：

冒泡排序：比较相邻元素的大小，若前者大于后者则交换，每轮将最大值移到数组末端。
选择排序：从待排序序列中找到最小（大）的元素，放到已排序序列的末尾，直至所有元素排序完毕。
插入排序：将待排序序列分为已排序和未排序两部分，每次取出未排序序列的第一个元素，插入到已排序序列中的适当位置。
快速排序：基于分治思想，通过选定主元（pivot）将原序列划分为左右两个子序列，并递归处理子序列。
归并排序：基于分治思想，将原序列不断拆分成更小的子序列，然后利用归并操作将子序列合并成有序序列。
堆排序：使用堆这种数据结构来实现的一种排序算法，将数组看作完全二叉树的形式，通过构建大根堆或小根堆来实现排序。
计数排序：适用于数据范围较小且元素值非负的情况，统计每个元素出现的次数，然后根据元素值和出现次数还原排序结果。
桶排序：将待排序元素分到不同的桶中，对每个桶进行排序，最后将所有桶中的元素按顺序合并起来。
